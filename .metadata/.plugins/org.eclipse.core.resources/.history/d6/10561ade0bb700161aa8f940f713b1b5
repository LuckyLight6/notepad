package com.remy;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.PageFormat;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.ServiceUI;
import javax.print.SimpleDoc;
import javax.print.attribute.DocAttributeSet;
import javax.print.attribute.HashDocAttributeSet;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.undo.UndoManager;

public class Notepad {
	private JFrame mainFrame;
	private Container con;
	private JMenuBar menuBar;
	private JMenu fileMenu;
	private JMenu editMenu;
	private JMenu formatMenu;
	private JMenu viewMenu;
	private JMenu helpMenu;
	private JScrollPane scrollPane;
	private JPanel panel;
	private JTextArea text;
	private JLabel stateLabel;
	private JMenuItem newFile;
	private JMenuItem openFile;
	private JMenuItem saveFile;
	private JMenuItem saveAsFile;
	private JMenuItem pageSetting;
	private JMenuItem print;
	private JMenuItem exit;
	private JMenuItem backout;
	private JMenuItem cut;
	private Font menuFont;
	private Font textFont;
	private JMenuItem copy;
	private JMenuItem paste;
	private JMenuItem delete;
	private JMenuItem find;
	private JMenuItem findNext;
	private JMenuItem replace;
	private JMenuItem go;
	private JMenuItem selectAll;
	private JMenuItem date;
	private JMenuItem font;
	private JCheckBoxMenuItem stateBar;
	private JMenuItem getHelp;
	private JMenuItem aboutNotepad;
	private JCheckBoxMenuItem autoNewLine;
	private PopupMenu rightClick;
	private MenuItem backoutRight;
	private MenuItem cutRight;
	private MenuItem copyRight;
	private MenuItem pasteRight;
	private MenuItem deleteRight;
	private MenuItem selectAllRight;
	private UndoManager undoManager;
	private FontDialog myFontDialog = null;
	private File file = null;
	private boolean changed = false;
	private boolean haveName = false;

	public Notepad() {
		initialize();
		WindowUtil.setFrameCenter(mainFrame);
	}

	private void initialize() {
		mainFrame = new JFrame();
		con = mainFrame.getContentPane();
		menuFont = new Font("微软雅黑", Font.PLAIN, 12);
		textFont = new Font("微软雅黑", Font.PLAIN, 16);
		mainFrame.setTitle("无标题 - 记事本");
		mainFrame.setSize(1440, 767);
		mainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		mainFrame.addWindowListener(new WindowClickClose());

		createMenu();
		createOther();
		createPopupMenu();
	}

	public void createMenu() {
		menuBar = new JMenuBar();
		menuBar.setBackground(Color.WHITE);
		mainFrame.setJMenuBar(menuBar);

		fileMenu = new JMenu("文件(F)");
		fileMenu.setFont(menuFont);
		fileMenu.setMnemonic('F');
		fileMenu.addMouseListener(new MouseClick());
		menuBar.add(fileMenu);

		newFile = new JMenuItem("      新建(N)");
		newFile.setFont(menuFont);
		newFile.setMnemonic('N');
		newFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK));
		newFile.addActionListener(new ActionAdapter());
		fileMenu.add(newFile);

		openFile = new JMenuItem("      打开(O)...");
		openFile.setFont(menuFont);
		openFile.setMnemonic('O');
		openFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_DOWN_MASK));
		openFile.addActionListener(new ActionAdapter());
		fileMenu.add(openFile);

		saveFile = new JMenuItem("      保存(S)");
		saveFile.setFont(menuFont);
		saveFile.setMnemonic('S');
		saveFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK));
		saveFile.addActionListener(new ActionAdapter());
		fileMenu.add(saveFile);

		saveAsFile = new JMenuItem("      另存为(A)...");
		saveAsFile.setFont(menuFont);
		saveAsFile.setMnemonic('A');
		saveAsFile.addActionListener(new ActionAdapter());
		fileMenu.add(saveAsFile);

		fileMenu.addSeparator();

		pageSetting = new JMenuItem("      页面设置(U)...");
		pageSetting.setFont(menuFont);
		pageSetting.setMnemonic('U');
		pageSetting.addActionListener(new ActionAdapter());
		fileMenu.add(pageSetting);

		print = new JMenuItem("      打印(P)...");
		print.setFont(menuFont);
		print.setMnemonic('P');
		print.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, InputEvent.CTRL_DOWN_MASK));
		print.addActionListener(new ActionAdapter());
		fileMenu.add(print);

		fileMenu.addSeparator();

		exit = new JMenuItem("      退出(X)...");
		exit.setFont(menuFont);
		exit.setMnemonic('X');
		exit.addActionListener(new ActionAdapter());
		fileMenu.add(exit);

		editMenu = new JMenu("编辑(E)");
		editMenu.setFont(menuFont);
		editMenu.setMnemonic('E');
		editMenu.addMouseListener(new MouseClick());
		menuBar.add(editMenu);

		backout = new JMenuItem("      撤销(U)");
		backout.setFont(menuFont);
		backout.setMnemonic('U');
		backout.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_DOWN_MASK));
		backout.addActionListener(new ActionAdapter());
		editMenu.add(backout);

		editMenu.addSeparator();

		cut = new JMenuItem("      剪切(T)");
		cut.setFont(menuFont);
		cut.setMnemonic('T');
		cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK));
		cut.addActionListener(new ActionAdapter());
		editMenu.add(cut);

		copy = new JMenuItem("      复制(C)");
		copy.setFont(menuFont);
		copy.setMnemonic('C');
		copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK));
		copy.addActionListener(new ActionAdapter());
		editMenu.add(copy);

		paste = new JMenuItem("      粘贴(V)");
		paste.setFont(menuFont);
		paste.setMnemonic('V');
		paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK));
		paste.addActionListener(new ActionAdapter());
		editMenu.add(paste);

		delete = new JMenuItem("      删除(L)");
		delete.setFont(menuFont);
		delete.setMnemonic('L');
		delete.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0));
		delete.addActionListener(new ActionAdapter());
		editMenu.add(delete);

		editMenu.addSeparator();

		find = new JMenuItem("      查找(F)");
		find.setFont(menuFont);
		find.setMnemonic('F');
		find.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.CTRL_DOWN_MASK));
		find.addActionListener(new ActionAdapter());
		editMenu.add(find);

		findNext = new JMenuItem("      查找下一个(N)");
		findNext.setFont(menuFont);
		findNext.setMnemonic('N');
		findNext.setAccelerator(KeyStroke.getKeyStroke((char) KeyEvent.VK_F3, 0));
		findNext.addActionListener(new ActionAdapter());
		editMenu.add(findNext);

		replace = new JMenuItem("      替换(R)...");
		replace.setFont(menuFont);
		replace.setMnemonic('R');
		replace.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, InputEvent.CTRL_DOWN_MASK));
		replace.addActionListener(new ActionAdapter());
		editMenu.add(replace);

		go = new JMenuItem("      转到(G)...");
		go.setFont(menuFont);
		go.setMnemonic('G');
		go.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, InputEvent.CTRL_DOWN_MASK));
		go.addActionListener(new ActionAdapter());
		editMenu.add(go);

		editMenu.addSeparator();

		selectAll = new JMenuItem("      全选(A)");
		selectAll.setFont(menuFont);
		selectAll.setMnemonic('A');
		selectAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK));
		selectAll.addActionListener(new ActionAdapter());
		editMenu.add(selectAll);

		date = new JMenuItem("      时间/日期(D)");
		date.setFont(menuFont);
		date.setMnemonic('D');
		date.setAccelerator(KeyStroke.getKeyStroke((char) KeyEvent.VK_F5, 0));
		date.addActionListener(new ActionAdapter());
		editMenu.add(date);

		formatMenu = new JMenu("格式(O)");
		formatMenu.setFont(menuFont);
		formatMenu.setMnemonic('O');
		formatMenu.addMouseListener(new MouseClick());
		menuBar.add(formatMenu);

		autoNewLine = new JCheckBoxMenuItem("      自动换行(W)    ");
		autoNewLine.setFont(menuFont);
		autoNewLine.setMnemonic('N');
		autoNewLine.addItemListener(new JMenuItemCheckBoxClick());
		formatMenu.add(autoNewLine);

		font = new JMenuItem("      字体(F)...");
		font.setFont(menuFont);
		font.setMnemonic('F');
		font.addActionListener(new ActionAdapter());
		formatMenu.add(font);

		viewMenu = new JMenu("查看(V)");
		viewMenu.setFont(menuFont);
		viewMenu.setMnemonic('V');
		viewMenu.addMouseListener(new MouseClick());
		menuBar.add(viewMenu);

		stateBar = new JCheckBoxMenuItem("      状态栏(S)    ");
		stateBar.setFont(menuFont);
		stateBar.setMnemonic('S');
		stateBar.addItemListener(new JMenuItemCheckBoxClick());
		viewMenu.add(stateBar);

		helpMenu = new JMenu("帮助(H)");
		helpMenu.setFont(menuFont);
		helpMenu.setMnemonic('H');
		helpMenu.addMouseListener(new MouseClick());
		menuBar.add(helpMenu);

		getHelp = new JMenuItem("      查看帮助(H)    ");
		getHelp.setFont(menuFont);
		getHelp.setMnemonic('H');
		getHelp.addActionListener(new ActionAdapter());
		helpMenu.add(getHelp);

		aboutNotepad = new JMenuItem("      关于notepad(A)");
		aboutNotepad.setFont(menuFont);
		aboutNotepad.setMnemonic('A');
		aboutNotepad.addActionListener(new ActionAdapter());
		helpMenu.add(aboutNotepad);
	}

	private void createOther() {
		scrollPane = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		con.add(scrollPane, BorderLayout.CENTER);

		panel = new JPanel();
		panel.setVisible(false);
		con.add(panel, BorderLayout.SOUTH);

		text = new JTextArea();
		text.addMouseListener(new MouseClick());
		text.getDocument().addDocumentListener(new JTextAeraChanged());
		text.addCaretListener(new JTextAreaPosition());
		text.setFont(textFont);
		undoManager = new UndoManager();
		text.getDocument().addUndoableEditListener(undoManager);
		scrollPane.setViewportView(text);
		panel.setLayout(new BorderLayout(0, 0));

		stateLabel = new JLabel("第1行，第1列");
		stateLabel.setFont(menuFont);
		panel.add(stateLabel);
	}

	public void createPopupMenu() {
		rightClick = new PopupMenu();

		backoutRight = new MenuItem("    撤销(U)");
		backoutRight.setFont(menuFont);
		rightClick.add(backoutRight);

		rightClick.addSeparator();

		cutRight = new MenuItem("    剪切(T)");
		cutRight.setFont(menuFont);
		rightClick.add(cutRight);

		copyRight = new MenuItem("    复制(C)");
		copyRight.setFont(menuFont);
		rightClick.add(copyRight);

		pasteRight = new MenuItem("    粘贴(P)");
		pasteRight.setFont(menuFont);
		rightClick.add(pasteRight);

		deleteRight = new MenuItem("    删除(D)");
		deleteRight.setFont(menuFont);
		rightClick.add(deleteRight);

		rightClick.addSeparator();

		selectAllRight = new MenuItem("    全选(A)");
		selectAllRight.setFont(menuFont);
		rightClick.add(selectAllRight);

		text.add(rightClick);
	}

	public void doNewFile() {
		int select;
		int flag = 0;

		if (changed) {
			select = JOptionPane.showConfirmDialog(mainFrame, "文件修改后尚未存盘，是否保存？");

			switch (select) {
			case JOptionPane.YES_OPTION:
				flag = doSave();
				break;
			case JOptionPane.NO_OPTION:
				flag = 1;
				break;
			default:
				flag = 0;
				break;
			}
		} else {
			flag = 1;
		}

		if (flag == 1) {
			mainFrame.setTitle("无标题 - 记事本");
			text.setText("");
			changed = false;
			haveName = false;
		}
	}

	public void doOpen() {
		int select;
		int flag = 0;
		File tmpFile = null;
		ExampleFileFilter filter;
		JFileChooser chooser;
		FileInputStream fis;
		byte[] buf;

		if (changed) {
			select = JOptionPane.showConfirmDialog(mainFrame, "文件修改后尚未存盘，收否修改？");

			switch (select) {
			case JOptionPane.YES_OPTION:
				flag = doSave();
				break;
			case JOptionPane.NO_OPTION:
				flag = 1;
				break;
			default:
				flag = 0;
				break;
			}
		} else {
			flag = 1;
		}

		if (flag == 1) {
			changed = false;
			filter = new ExampleFileFilter();
			filter.addExtension("txt");
			filter.setDescription("文本文件");

			if (file != null) {
				chooser = new JFileChooser(file.getPath());
			} else {
				chooser = new JFileChooser();
			}

			chooser.setFileFilter(filter);
			select = chooser.showOpenDialog(mainFrame);

			if (select == JFileChooser.APPROVE_OPTION) {
				tmpFile = chooser.getSelectedFile();

				try {
					if (tmpFile != null) {
						fis = new FileInputStream(tmpFile);
						buf = new byte[(int) tmpFile.length()];
						fis.read(buf);
						fis.close();

						text.setText(new String(buf));
						file = tmpFile;
						mainFrame.setTitle(file.getName() + " - 记事本");
						changed = false;
						haveName = true;
					}
				} catch (FileNotFoundException e) {
					JOptionPane.showMessageDialog(mainFrame, "指定的文件名称或属性有问题！");
				} catch (IOException e) {
					JOptionPane.showMessageDialog(mainFrame, "无法读取文件，请检查文件是否被锁定！");
				}
			}
		}
	}

	public int doSave() {
		FileOutputStream fos;
		byte[] content;
		int flag;

		if (!haveName) {
			flag = doSaveAs();
		} else if (changed) {
			try {
				fos = new FileOutputStream(file);
				content = text.getText().getBytes();
				fos.write(content);
				fos.close();
				changed = false;
				flag = 1;
			} catch (FileNotFoundException e) {
				JOptionPane.showConfirmDialog(mainFrame, "指定的文件名称或属性有问题！");
				flag = 0;
			} catch (IOException e) {
				JOptionPane.showConfirmDialog(mainFrame, "无法写文件，请检查文件是否被锁定！");
				flag = 0;
			}
		} else {
			flag = 1;
		}

		return flag;
	}

	public int doSaveAs() {
		FileOutputStream fos;
		byte[] content;
		int flag = 0;
		File tmpFile = null;
		ExampleFileFilter filter = new ExampleFileFilter();
		JFileChooser chooser;

		filter.addExtension("txt");
		filter.setDescription("文本文件");

		if (file != null) {
			chooser = new JFileChooser(file.getPath());
		} else {
			chooser = new JFileChooser();
		}

		chooser.setFileFilter(filter);

		flag = chooser.showSaveDialog(mainFrame);
		if (flag == JFileChooser.APPROVE_OPTION) {
			tmpFile = chooser.getSelectedFile();

			if (tmpFile.exists()) {
				if (JOptionPane.showConfirmDialog(mainFrame, "文件已经存在，是否覆盖？", "警告",
						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
					flag = 1;
				} else {
					flag = 0;
				}
			} else {
				flag = 0;
			}
		}

		if (flag == 1) {
			try {
				if (tmpFile != null) {
					fos = new FileOutputStream(tmpFile);
					content = text.getText().getBytes();
					fos.write(content);
					fos.close();
					flag = 1;
				}
			} catch (FileNotFoundException e) {
				JOptionPane.showMessageDialog(mainFrame, "指定的文件名称或属性有问题！");
				flag = 0;
			} catch (IOException e) {
				JOptionPane.showMessageDialog(mainFrame, "无法读写文件，请检查文件是否被锁定！");
				flag = 0;
			}
		}

		if (flag == 1) {
			if (tmpFile != null) {
				file = tmpFile;
				mainFrame.setTitle(file.getName() + " - 记事本");
				changed = false;
				haveName = true;
			}
		}

		return flag;
	}

	public void doPageSetting() {
		PageFormat pf = new PageFormat();
		PrinterJob.getPrinterJob().pageDialog(pf);
	}

	public void doPrint() {
		try {
			PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
			DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
			PrintService[] printServices = PrintServiceLookup.lookupPrintServices(flavor, pras);
			PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();
			PrintService service = null;
			service = ServiceUI.printDialog(null, 100, 100, printServices, defaultService, flavor, pras);

			if (service != null) {
				DocPrintJob job = service.createPrintJob();
				DocAttributeSet das = new HashDocAttributeSet();
				Doc doc = new SimpleDoc(text.getText().getBytes(), flavor, das);
				job.print(doc, pras);
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(mainFrame, "打印任务无法完成！");
		}
	}

	public void doExit() {
		int select;

		if (!changed) {
			System.exit(0);
		} else {
			select = JOptionPane.showConfirmDialog(mainFrame, "是否将更改保存到 " + "？", "notepad",
					JOptionPane.YES_NO_CANCEL_OPTION);

			switch (select) {
			case JOptionPane.YES_OPTION:
				select = doSave();
				if (select == 1) {
					System.exit(0);
				}
				break;

			case JOptionPane.NO_OPTION:
				System.exit(0);
				break;
			case JOptionPane.CANCEL_OPTION:
				break;
			}
		}
	}

	public void doBackout() {
		if (undoManager.canUndo()) {
			undoManager.undo();
		}
	}

	public void doCut() {
		text.cut();
	}

	public void doCopy() {
		text.copy();
	}

	public void doPaste() {
		text.paste();
	}

	public void doFind() {
		new FindDialog(mainFrame, text);
	}

	public void doFindNext() {
		new FindDialog(mainFrame, text);
	}

	public void doReplace() {
		new ReplaceDialog(mainFrame, text);
	}

	public void doGo() {
		new GoDialog(mainFrame, text);
	}

	public void doSelectAll() {
		text.selectAll();
	}

	public void doDate() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		text.append(sdf.format(new Date()));
	}

	public void doFont() {
		if (myFontDialog == null) {
			myFontDialog = new FontDialog(mainFrame);
		}
		
		if (myFontDialog.showFontDialog() == FontDialog.OK) {
			text.setFont(myFontDialog.getFont());
		}
	}

	public void doGetHelp() {
		
	}

	public void doAboutNotepad() {
		
	}

	public class ActionAdapter implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			Object obj = e.getSource();

			if (obj == newFile) {
				doNewFile();
			} else if (obj == openFile) {
				doOpen();
			} else if (obj == saveFile) {
				doSave();
			} else if (obj == saveAsFile) {
				doSaveAs();
			} else if (obj == pageSetting) {
				doPageSetting();
			} else if (obj == print) {
				doPrint();
			} else if (obj == exit) {
				doExit();
			} else if (obj == backout) {
				doBackout();
			} else if (obj == cut) {
				doCut();
			} else if (obj == copy) {
				doCopy();
			} else if (obj == paste) {
				doPaste();
			} else if (obj == find) {
				doFind();
			} else if (obj == findNext) {
				doFindNext();
			} else if (obj == replace) {
				doReplace();
			} else if (obj == go) {
				doGo();
			} else if (obj == selectAll) {
				doSelectAll();
			} else if (obj == date) {
				doDate();
			} else if (obj == font) {
				doFont();
			} else if (obj == getHelp) {
				doGetHelp();
			} else if (obj == aboutNotepad) {
				doAboutNotepad();
			}
		}
	}

	public class MouseClick extends MouseAdapter {
		@Override
		public void mouseEntered(MouseEvent e) {
			Object obj = e.getSource();

			if (obj == fileMenu || obj == editMenu || obj == formatMenu || obj == viewMenu || obj == helpMenu) {
				((JComponent) obj).setOpaque(true);
				((Component) obj).setBackground(new Color(174, 238, 238));
			}
		}

		@Override
		public void mouseExited(MouseEvent e) {
			Object obj = e.getSource();

			if (obj == fileMenu || obj == editMenu || obj == formatMenu || obj == viewMenu || obj == helpMenu) {
				((Component) obj).setBackground(Color.WHITE);
			}
		}

		@Override
		public void mousePressed(MouseEvent e) {
			Object obj = e.getSource();
			int mods = e.getModifiers();

			if (obj == text) {
				if ((mods & InputEvent.BUTTON3_MASK) != 0) {
					rightClick.show(text, e.getX(), e.getY());
				}
			}
		}
	}

	public class JMenuItemCheckBoxClick implements ItemListener {
		@Override
		public void itemStateChanged(ItemEvent e) {
			Object obj = e.getSource();

			if (obj == stateBar) {
				if (((JCheckBoxMenuItem) obj).getState()) {
					panel.setVisible(true);
				} else {
					panel.setVisible(false);
				}
			}

			if (obj == autoNewLine) {
				if (((JCheckBoxMenuItem) obj).getState()) {
					text.setLineWrap(true);
					scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
				} else {
					text.setLineWrap(false);
					scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
				}
			}
		}
	}

	public class WindowClickClose extends WindowAdapter {
		@Override
		public void windowClosing(WindowEvent e) {
			if (e.getID() == WindowEvent.WINDOW_CLOSING) {
				doExit();
			}
		}
	}

	public class JTextAeraChanged implements DocumentListener {
		@Override
		public void insertUpdate(DocumentEvent e) {
			changed = true;
		}

		@Override
		public void removeUpdate(DocumentEvent e) {
			changed = true;
		}

		@Override
		public void changedUpdate(DocumentEvent e) {
		}
	}

	public class JTextAreaPosition implements CaretListener {
		@Override
		public void caretUpdate(CaretEvent e) {
			try {
				int pos = text.getCaretPosition();
				// 获取行数
				int row = text.getLineOfOffset(pos) + 1;
				// 获取列数
				int col = pos - text.getLineStartOffset(row - 1) + 1;
				stateLabel.setText("第" + row + "行，第" + col + "列");
			} catch (Exception ex) {
				stateLabel.setText("无法获得当前光标位置！");
			}
		}
	}

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Notepad window = new Notepad();
					window.mainFrame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}